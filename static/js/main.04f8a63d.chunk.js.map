{"version":3,"sources":["reducers.js","configureStore.js","LanguagesList.jsx","selector.js","WordTable.jsx","App.js","registerServiceWorker.js","index.js"],"names":["combineReducers","form","formReducer","modal","persistConfig","key","storage","persistedReducer","persistReducer","reducer","configureStore","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","renderRow","Language","index","react_default","a","createElement","title","num","Field","name","concat","className","component","type","LanguagesList","props","Languages","map","colSpan","onClick","reset","reduxForm","LanguagesMap","reduce","acc","item","Object","objectSpread","defineProperty","HardCharsMap","split","SoftCharsMap","HardChars","SoftChars","ReplacebleChars","applyGroup","groupId","char","mapping","src","dst","indexOf","formSelector","formValueSelector","wordsSelector","state","getLanguagesStats","languages","countPercent","length","peoplePercent","sumBy","getScore","rows","getBestChar","orderBy","charCountSelector","createSelector","words","keys","filter","word","max","rowSelector","language","chars","row","columnSelector","numCols","columns","Array","i","range","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","column","push","err","return","statSelector","_getLanguagesStats","score","groupSelector","softRows","hardRows","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","softScore","hardScore","reportSelector","_ref","group","winner","bestRow","find","validRows","winnerSelector","join","activeLanguagesSelector","connect","charCount","report","_ref3","toFixed","j","renderRows","_ref2","renderReport","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_configureStore","es","integration_react","loading","src_LanguagesList","src_WordTable","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.04f8a63d.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { reducer as modal } from \"redux-modal\";\r\n\r\nexport default combineReducers({\r\n  form: formReducer,\r\n  modal\r\n});\r\n","import { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport reducer from \"./reducers\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer);\r\n\r\nexport default () => {\r\n  const store = createStore(\r\n    persistedReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  );\r\n  const persistor = persistStore(store);\r\n  return { store, persistor };\r\n};\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport Languages from './languages.json';\r\n\r\nconst renderRow = (Language, index) => (\r\n  <tr key={index}>\r\n    <td>{Language.title}</td>\r\n    <td>{Language.num}</td>\r\n    <td>\r\n      <Field\r\n        name={`language.${Language.title}`}\r\n        className=\"form-control\"\r\n        component=\"input\"\r\n        type=\"text\"\r\n      />\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nlet LanguagesList = props => (\r\n  <table className=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th>Язык</th>\r\n        <th>Носителей (млн)</th>\r\n        <th>Слово</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {Languages.map(renderRow)}\r\n      <tr>\r\n        <td colSpan={3}>\r\n          <button type=\"button\" className=\"btn btn-default\" onClick={props.reset}>\r\n            Очистить\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nLanguagesList = reduxForm({ form: 'LanguagesList' })(LanguagesList);\r\n\r\nexport default LanguagesList;\r\n","import { formValueSelector } from \"redux-form\";\r\nimport { createSelector } from \"reselect\";\r\nimport { max, range, sumBy, orderBy } from \"lodash\";\r\n\r\nimport Languages from \"./languages.json\";\r\n\r\nconst LanguagesMap = Languages.reduce(\r\n  (acc, item) => ({ ...acc, [item.title]: item }),\r\n  {}\r\n);\r\n\r\nconst HardGroupId = true;\r\n\r\nconst HardCharsMap = \"aouıqğ\".split(\"\");\r\nconst SoftCharsMap = \"âöüikg\".split(\"\");\r\n\r\nconst HardChars = HardCharsMap;\r\nconst SoftChars = SoftCharsMap.concat([\"e\"]);\r\nconst ReplacebleChars = HardCharsMap.concat(SoftChars);\r\n\r\nconst applyGroup = (groupId, char) => {\r\n  const mapping =\r\n    groupId !== HardGroupId\r\n      ? {\r\n          src: HardCharsMap,\r\n          dst: SoftCharsMap\r\n        }\r\n      : {\r\n          src: SoftCharsMap,\r\n          dst: HardCharsMap\r\n        };\r\n  const index = mapping.src.indexOf(char);\r\n  if (index !== -1) {\r\n    return mapping.dst[index];\r\n  } else {\r\n    return char;\r\n  }\r\n};\r\n\r\nconst formSelector = formValueSelector(\"LanguagesList\");\r\nconst wordsSelector = state => formSelector(state, \"language\") || [];\r\n\r\nconst countChars = words => {\r\n  const valid = Object.keys(words)\r\n    .map(key => words[key])\r\n    .filter(word => word);\r\n  const length = valid.map(word => word.length);\r\n  return max(length);\r\n};\r\n\r\nconst splitWords = words =>\r\n  Object.keys(words)\r\n    .map(title => ({\r\n      language: LanguagesMap[title],\r\n      chars: words[title] ? words[title].split(\"\") : []\r\n    }))\r\n    .filter(row => row.chars.length > 0);\r\n\r\nconst getColumns = (rows, numCols) => {\r\n  const columns = new Array(numCols);\r\n  for (const i in range(numCols)) {\r\n    columns[i] = {};\r\n    for (const row of rows) {\r\n      if (i < row.chars.length) {\r\n        const column = columns[i];\r\n        const char = row.chars[i];\r\n        column[char] = column[char] || [];\r\n        column[char].push(row.language);\r\n      }\r\n    }\r\n  }\r\n  return columns;\r\n};\r\n\r\nconst getLanguagesStats = languages => ({\r\n  countPercent: languages.length * 100 / Languages.length,\r\n  peoplePercent: sumBy(languages, \"num\") * 100 / sumBy(Languages, \"num\")\r\n});\r\n\r\nconst getStats = columns =>\r\n  columns.map(\r\n    column =>\r\n      column &&\r\n      Object.keys(column).map(char => {\r\n        const languages = column[char];\r\n        const { countPercent, peoplePercent } = getLanguagesStats(languages);\r\n        return {\r\n          char,\r\n          languages,\r\n          countPercent,\r\n          peoplePercent,\r\n          score: countPercent + peoplePercent\r\n        };\r\n      })\r\n  );\r\n\r\nconst getScore = rows => sumBy(rows, \"score\");\r\n\r\nconst selectGroup = columns => {\r\n  if (!columns) {\r\n    return;\r\n  }\r\n  const softRows = [];\r\n  const hardRows = [];\r\n\r\n  for (const column of columns) {\r\n    if (!column) {\r\n      continue;\r\n    }\r\n    for (const row of column) {\r\n      if (SoftChars.indexOf(row.char) !== -1) {\r\n        softRows.push(row);\r\n      }\r\n      if (HardChars.indexOf(row.char) !== -1) {\r\n        hardRows.push(row);\r\n      }\r\n    }\r\n  }\r\n  const softScore = getScore(softRows);\r\n  const hardScore = getScore(hardRows);\r\n  return { hardScore, softScore, groupId: hardScore > softScore };\r\n};\r\n\r\nconst getBestChar = rows => {\r\n  const stats = orderBy(rows, \"score\", \"desc\");\r\n  return stats[0].char;\r\n};\r\n\r\nconst getReport = (columns, { groupId }) =>\r\n  columns &&\r\n  columns.map(column => {\r\n    if (!column) {\r\n      return null;\r\n    }\r\n    const group = groupId === HardGroupId ? HardChars : SoftChars;\r\n    let winner = getBestChar(column);\r\n    let bestRow = column.find(row => row.char === winner);\r\n    if (\r\n      ReplacebleChars.indexOf(winner) !== -1 &&\r\n      group.indexOf(winner) === -1\r\n    ) {\r\n      const validRows = column.filter(\r\n        row => row && group.indexOf(row.char) !== -1\r\n      );\r\n      if (validRows.length > 0) {\r\n        winner = applyGroup(groupId, getBestChar(validRows));\r\n        bestRow = column.find(row => row.char === winner);\r\n      } else {\r\n        winner = applyGroup(groupId, winner);\r\n      }\r\n    }\r\n    return { winner, bestRow, rows: orderBy(column, \"score\", \"desc\") };\r\n  });\r\n\r\nconst getWinnerWord = columns =>\r\n  columns && columns.map(column => column && column.winner).join(\"\");\r\n\r\nconst getActiveLanguages = words => {\r\n  const languages = Object.keys(words).map(word => LanguagesMap[word]);\r\n  return getLanguagesStats(languages);\r\n};\r\n\r\nconst charCountSelector = createSelector(wordsSelector, countChars);\r\nconst rowSelector = createSelector(wordsSelector, splitWords);\r\nconst columnSelector = createSelector(\r\n  rowSelector,\r\n  charCountSelector,\r\n  getColumns\r\n);\r\nconst statSelector = createSelector(columnSelector, getStats);\r\nconst groupSelector = createSelector(statSelector, selectGroup);\r\nconst reportSelector = createSelector(statSelector, groupSelector, getReport);\r\nconst winnerSelector = createSelector(reportSelector, getWinnerWord);\r\nconst activeLanguagesSelector = createSelector(\r\n  wordsSelector,\r\n  getActiveLanguages\r\n);\r\n\r\nexport default state => ({\r\n  charCount: charCountSelector(state),\r\n  rows: rowSelector(state),\r\n  report: reportSelector(state),\r\n  winner: winnerSelector(state),\r\n  group: groupSelector(state),\r\n  languages: activeLanguagesSelector(state)\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { range } from \"lodash\";\r\n\r\nimport tableSelector from \"./selector\";\r\n\r\nconst renderRows = ({ rows }) =>\r\n  rows &&\r\n  rows.map((row, i) => (\r\n    <tr key={i}>\r\n      <td>{row.language.title}</td>\r\n      {row.chars.map((char, j) => <td key={j}>{char}</td>)}\r\n    </tr>\r\n  ));\r\n\r\nconst renderReport = ({ rows, report }) => rows.length > 0 ? (\r\n  <tr>\r\n    <td>Отчёт</td>\r\n    {report &&\r\n      report.map(\r\n        (column, index) =>\r\n          column && (\r\n            <td key={index}>\r\n              {column.rows.map((row, index) => (\r\n                <div key={index}>\r\n                  {row.char}: {row.score.toFixed(2)}\r\n                </div>\r\n              ))}\r\n            </td>\r\n          )\r\n      )}\r\n  </tr>\r\n) : null;\r\n\r\nlet WordTable = ({ charCount, rows, report, winner, languages }) => (\r\n  <div>\r\n    <p>\r\n      <strong>Победитель: </strong>\r\n      {winner}\r\n    </p>\r\n    <p>\r\n      <strong>Количество языков: </strong>\r\n      {languages.countPercent.toFixed(2)}%\r\n    </p>\r\n    <p>\r\n      <strong>Количество носителей: </strong>\r\n      {languages.peoplePercent.toFixed(2)}%\r\n    </p>\r\n    <table className=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th>Язык</th>\r\n          {range(charCount).map(index => (\r\n            <th key={index}>Фонема {index + 1}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {renderRows({ rows })}\r\n        {renderReport({ rows, report })}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n);\r\n\r\nexport default connect(tableSelector)(WordTable);\r\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport configureStore from \"./configureStore\";\nimport LanguagesList from \"./LanguagesList\";\nimport WordTable from \"./WordTable\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const { store, persistor } = configureStore();\n    this.store = store;\n    this.persistor = persistor;\n  }\n\n  render() {\n    return (\n      <Provider store={this.store}>\n        <PersistGate loading={null} persistor={this.persistor}>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-12\">\n                <LanguagesList />\n                <WordTable />\n              </div>\n            </div>\n          </div>\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}